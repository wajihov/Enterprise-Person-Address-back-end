openapi: 3.0.2
info:
  title: societe-person-api
  version: 1.0.0
  description: A brand new API with no content.  Go nuts!
paths:
  /addresses:
    summary: Path used to manage the list of adressedtos.
    description: >-
      The REST endpoint/path used to list and create zero or more `adresseDto` entities.  This path
      contains a `GET` and `POST` operation to perform the list and create tasks, respectively.
    get:
      tags:
        - Address
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AddressDto'
          description: Successful response - returns an array of `addresses` entities.
      operationId: findAddresses
      summary: list of addresses
      description: Gets a list of all `addresses` entities.
    post:
      requestBody:
        description: A new `adresseDto` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressDto'
        required: true
      tags:
        - Address
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressDto'
          description: address is created successfully.
      operationId: createAddress
      summary: Create a new address
      description: Creates a new instance of a `adresseDto`.
  '/addresses/{id}':
    summary: Path used to manage a single adresseDto.
    description: >-
      The REST endpoint/path used to get, update, and delete single instances of an `adresseDto`.  This
      path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete
      tasks, respectively.
    get:
      tags:
        - Address
      parameters:
        -
          name: id
          description: A unique identifier for a `adresseDto`.
          schema:
            format: int64
            type: integer
          in: path
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressDto'
          description: Successful response - returns a single `Address`.
        '404':
          content:
            application/json:
              schema:
                type: string
          description: Address Not Found
      operationId: findAddressById
      summary: Get an adress with id
      description: Gets the details of a single instance of an `Address`.
    put:
      requestBody:
        description: Updated `adresseDto` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressDto'
        required: true
      tags:
        - Address
      parameters:
        -
          name: id
          description: A unique identifier for a `adresseDto`.
          schema:
            format: int64
            type: integer
          in: path
          required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressDto'
          description: Successful response.
      operationId: updateAddress
      summary: Update an address
      description: Updates an existing `Address`.
    delete:
      tags:
        - Address
      parameters:
        -
          name: id
          description: A unique identifier for a `adresseDto`.
          schema:
            format: int64
            type: integer
          in: path
          required: true
      responses:
        '204':
          description: The Address has been successfully deleted
        '404':
          description: The Address not found.
      operationId: deleteAddress
      summary: Delete an address
      description: Deletes an existing `Address`.
    parameters:
      -
        name: id
        description: A unique identifier for a `adresseDto`.
        schema:
          format: int64
          type: integer
        in: path
        required: true
  /personals:
    get:
      tags:
        - Personal
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PersonalDto'
          description: Get all personals in the base
      operationId: findPersonals
      summary: list of personals
    post:
      requestBody:
        description: 'Add person in the base '
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonalDto'
        required: true
      tags:
        - Personal
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonalDto'
          description: a personnal is successfully created
      operationId: createPersonal
      summary: Create a new personal
  '/personals/{id}':
    summary: Path used to manage a single personDto.
    description: >-
      The REST endpoint/path used to get, update, and delete single instances of an `personDto`.  This
      path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete
      tasks, respectively.
    get:
      tags:
        - Personal
      parameters:
        -
          name: id
          description: A unique identifier for a `personDto`.
          schema:
            format: int64
            type: integer
          in: path
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonalDto'
          description: Successful response - returns a single `personal`.
        '404':
          content:
            application/json:
              schema:
                type: string
          description: Personal not found
      operationId: findPersonalById
      summary: Get a personal by id
      description: Gets the details of a single instance of a `personal`.
    put:
      requestBody:
        description: Updated `personal` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonalDto'
        required: true
      tags:
        - Personal
      parameters:
        -
          name: id
          description: A unique identifier for a `personDto`.
          schema:
            format: int64
            type: integer
          in: path
          required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonalDto'
          description: Successful response.
      operationId: updatePersonal
      summary: Update a personal
      description: Updates an existing `personal`.
    delete:
      tags:
        - Personal
      parameters:
        -
          name: id
          description: A unique identifier for a `personDto`.
          schema:
            format: int64
            type: integer
          in: path
          required: true
      responses:
        '204':
          description: The personal has been successfully deleted
        '404':
          description: The personal not found.
      operationId: deletePersonal
      summary: Delete a personal by id
      description: Deletes an existing `personal`.
    parameters:
      -
        name: id
        description: A unique identifier for a `personDto`.
        schema:
          format: int64
          type: integer
        in: path
        required: true
  /enterprises:
    summary: Path used to manage the list of enterprisedtos.
    description: >-
      The REST endpoint/path used to list and create zero or more `enterpriseDto` entities.  This path
      contains a `GET` and `POST` operation to perform the list and create tasks, respectively.
    get:
      tags:
        - Entreprise
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EnterpriseDto'
          description: Successful response - returns an array of `enterprise` entities.
      operationId: findEnterprises
      summary: list of Entreprises
      description: Get a list of all `Entreprises` entities.
    post:
      requestBody:
        description: A new `enterprise` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnterpriseDto'
        required: true
      tags:
        - Entreprise
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnterpriseDto'
          description: Successful response.
      operationId: createEnterprise
      summary: Create a new enterprise
      description: Creates a new instance of a `enterpriseDto`.
  '/enterprises/{id}':
    summary: Path used to manage a single enterpriseDto.
    description: >-
      The REST endpoint/path used to get, update, and delete single instances of an `enterpriseDto`.
      This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and
      delete tasks, respectively.
    get:
      tags:
        - Entreprise
      parameters:
        -
          name: id
          description: A unique identifier for a `enterpriseDto`.
          schema:
            format: int64
            type: integer
          in: path
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnterpriseDto'
          description: Successful response - returns a single `Entreprise`.
        '404':
          content:
            application/json:
              schema:
                type: string
          description: Not Found Entreprise
      operationId: findEnterpriseById
      summary: Get an Entreprise
      description: Gets the details of a single instance of a `Entreprise`.
    put:
      requestBody:
        description: Updated `Entreprise` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnterpriseDto'
        required: true
      tags:
        - Entreprise
      parameters:
        -
          name: id
          description: A unique identifier for a `enterpriseDto`.
          schema:
            format: int64
            type: integer
          in: path
          required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnterpriseDto'
          description: Successful response.
      operationId: updateEnterprise
      summary: Update an Entreprise
      description: Updates an existing `Entreprise`.
    delete:
      tags:
        - Entreprise
      parameters:
        -
          name: id
          description: A unique identifier for a `enterpriseDto`.
          schema:
            format: int64
            type: integer
          in: path
          required: true
      responses:
        '200':
          description: The Entreprise has been successfully deleted.
        '404':
          description: The Entreprise not found.
      operationId: deleteEnterprise
      summary: Delete an Entreprise
      description: Deletes an existing `Entreprise`.
    parameters:
      -
        name: id
        description: A unique identifier for a `enterpriseDto`.
        schema:
          format: int64
          type: integer
        in: path
        required: true
components:
  schemas:
    AddressDto:
      description: Adresse Dto
      type: object
      properties:
        id:
          format: int64
          type: integer
        address:
          type: string
        postal_code:
          type: string
        country:
          type: string
        city:
          type: string
    PersonalDto:
      description: Person Dto
      type: object
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
        lastName:
          type: string
        post:
          enum:
            - PRESIDENT
            - HRD
            - ADMINISTRATOR
            - EMPLOYEE
          type: string
        address_id:
          format: int64
          type: integer
        enterprise_id:
          format: int64
          type: integer
    EnterpriseDto:
      description: Entreprise Dto
      type: object
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
        tax_number:
          type: string
        address_id:
          format: int64
          type: integer
        personals:
          type: array
          items:
            $ref: '#/components/schemas/PersonalDto'
